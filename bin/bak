#!/usr/bin/env ruby
require "gli"

begin # TODO: Remove this begin/rescue before distributing your app
  require_relative "../lib/bak-shell"
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/bak` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/bak now"
  exit 64
end

include GLI::App

program_desc "Describe your application here"

version BakShell::VERSION

desc "Describe some switch here"
switch [:s,:switch]

desc "Describe some flag here"
default_value "the default"
arg_name "The name of the argument"
flag [:f,:flagname]

desc "Describe restore here"
arg_name "Describe arguments to restore here"
command :restore do |c|
  c.desc "Describe a switch to restore"
  c.switch :s

  c.desc "Describe a flag to restore"
  c.default_value "default"
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "restore command ran"
  end
end

desc "Describe list here"
arg_name "Describe arguments to list here"
command :list do |c|
  c.action do |global_options,options,args|
    puts "list command ran"
  end
end

desc "Describe purge here"
arg_name "Describe arguments to purge here"
command :purge do |c|
  c.action do |global_options,options,args|
    puts "purge command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
